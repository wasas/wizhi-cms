{"version":3,"sources":["../assets/scripts/forms/ion.rangeSlider.js"],"names":["factory","define","amd","jQuery","document","window","navigator","exports","require","$","undefined","plugin_count","is_old_ie","v","n","userAgent","r","search","exec","toString","split","addClass","Function","prototype","bind","that","target","this","slice","TypeError","args","call","arguments","bound","F","self","result","apply","concat","Object","Array","indexOf","searchElement","fromIndex","k","O","len","length","Math","abs","Infinity","max","IonRangeSlider","input","options","VERSION","current_plugin","calc_count","update_tm","old_from","old_to","old_min_interval","raf_id","dragging","force_redraw","no_diapason","has_tab_index","is_key","is_update","is_start","is_finish","is_active","is_resize","is_click","$cache","win","body","cont","rs","min","from","to","single","bar","line","s_single","s_from","s_to","shad_single","shad_from","shad_to","edge","grid","grid_labels","coords","x_gap","x_pointer","w_rs","w_rs_old","w_handle","p_gap","p_gap_left","p_gap_right","p_step","p_pointer","p_handle","p_single_fake","p_single_real","p_from_fake","p_from_real","p_to_fake","p_to_real","p_bar_x","p_bar_w","grid_gap","big_num","big","big_w","big_p","big_x","labels","w_min","w_max","w_from","w_to","w_single","p_min","p_max","p_from_left","p_to_left","p_single_left","config","config_from_data","prop","$inp","val","type","step","min_interval","max_interval","drag_interval","values","p_values","from_fixed","from_min","from_max","from_shadow","to_fixed","to_min","to_max","to_shadow","prettify_enabled","prettify_separator","prettify","force_edges","keyboard","grid_margin","grid_num","grid_snap","hide_min_max","hide_from_to","prefix","postfix","max_postfix","decorate_both","values_separator","input_values_separator","disable","block","extra_classes","scope","onStart","onChange","onFinish","onUpdate","nodeName","console","warn","data","hasOwnProperty","extend","update_check","validate","slider","from_percent","from_value","to_percent","to_value","init","convertToPercent","toggleInput","append","setMinMax","calc","callOnUpdate","callOnStart","updateScene","container_html","before","prev","html","find","style","visibility","setTopHandler","display","appendGrid","appendDisableMask","disabled","removeDisableMask","bindEvents","cursor","changeLevel","toFixed","removeClass","remove","off","cancelAnimationFrame","on","pointerMove","pointerUp","pointerClick","pointerFocus","pointerDown","key","e","x","$handle","offset","left","width","preventDefault","pageX","originalEvent","touches","restoreOriginalMinInterval","contains","callOnFinish","button","setTempMinInterval","calcPointerPercent","trigger","altKey","ctrlKey","shiftKey","metaKey","which","moveByKey","right","p","decorate","min_pretty","_prettify","max_pretty","outerWidth","interval","update","calcHandlePercent","handle_x","getHandleX","chooseHandle","w","f","t","checkDiapason","convertToFakePercent","convertToRealPercent","calcWithStep","checkMinInterval","checkMaxInterval","real_x","full","half","new_from","new_to","convertToValue","from_pretty","to_pretty","calcMinMax","calcLabels","isNaN","fake","real","checkEdges","clearTimeout","drawHandles","requestAnimationFrame","setTimeout","drawLabels","calcGridMargin","calcGridLabels","drawShadow","writeToInput","callOnChange","text_single","text_from","text_to","values_num","single_left","to_left","o","c","is_from_min","is_from_max","is_to_min","is_to_max","toggleClass","removeProp","value","no_min","percent","diapason","one_percent","min_length","max_length","min_decimals","max_decimals","avg_decimals","number","string","rounded","round","p_current","p_next","current","next","p_num","num","replace","i","vl","push","original","decorated","updateFrom","updateTo","updateResult","z","local_small_max","small_p","total","small_max","small_w","ceil","cacheGridLabels","$label","label","start","finish","calcGridCollision","Number","POSITIVE_INFINITY","marginLeft","next_i","reset","destroy","fn","ionRangeSlider","each","lastTime","vendors","callback","element","currTime","Date","getTime","timeToCall","id"],"mappings":"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","file":"slider.js","sourcesContent":["// Ion.RangeSlider\n// version 2.2.0 Build: 380\n// © Denis Ineshin, 2017\n// https://github.com/IonDen\n//\n// Project page:    http://ionden.com/a/plugins/ion.rangeSlider/en.html\n// GitHub page:     https://github.com/IonDen/ion.rangeSlider\n//\n// Released under MIT licence:\n// http://ionden.com/a/plugins/licence-en.html\n// =====================================================================================================================\n\n;(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"jquery\"], function (jQuery) {\n            return factory(jQuery, document, window, navigator);\n        });\n    } else if (typeof exports === \"object\") {\n        factory(require(\"jquery\"), document, window, navigator);\n    } else {\n        factory(jQuery, document, window, navigator);\n    }\n} (function ($, document, window, navigator, undefined) {\n    \"use strict\";\n\n    // =================================================================================================================\n    // Service\n\n    var plugin_count = 0;\n\n    // IE8 fix\n    var is_old_ie = (function () {\n        var n = navigator.userAgent,\n            r = /msie\\s\\d+/i,\n            v;\n        if (n.search(r) > 0) {\n            v = r.exec(n).toString();\n            v = v.split(\" \")[1];\n            if (v < 9) {\n                $(\"html\").addClass(\"lt-ie9\");\n                return true;\n            }\n        }\n        return false;\n    } ());\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function bind(that) {\n\n            var target = this;\n            var slice = [].slice;\n\n            if (typeof target != \"function\") {\n                throw new TypeError();\n            }\n\n            var args = slice.call(arguments, 1),\n                bound = function () {\n\n                    if (this instanceof bound) {\n\n                        var F = function(){};\n                        F.prototype = target.prototype;\n                        var self = new F();\n\n                        var result = target.apply(\n                            self,\n                            args.concat(slice.call(arguments))\n                        );\n                        if (Object(result) === result) {\n                            return result;\n                        }\n                        return self;\n\n                    } else {\n\n                        return target.apply(\n                            that,\n                            args.concat(slice.call(arguments))\n                        );\n\n                    }\n\n                };\n\n            return bound;\n        };\n    }\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function(searchElement, fromIndex) {\n            var k;\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n            var O = Object(this);\n            var len = O.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = +fromIndex || 0;\n            if (Math.abs(n) === Infinity) {\n                n = 0;\n            }\n            if (n >= len) {\n                return -1;\n            }\n            k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n            while (k < len) {\n                if (k in O && O[k] === searchElement) {\n                    return k;\n                }\n                k++;\n            }\n            return -1;\n        };\n    }\n\n\n\n    // =================================================================================================================\n    // Template\n\n    var base_html =\n        '<span class=\"irs\">' +\n        '<span class=\"irs-line\" tabindex=\"0\"><span class=\"irs-line-left\"></span><span class=\"irs-line-mid\"></span><span class=\"irs-line-right\"></span></span>' +\n        '<span class=\"irs-min\">0</span><span class=\"irs-max\">1</span>' +\n        '<span class=\"irs-from\">0</span><span class=\"irs-to\">0</span><span class=\"irs-single\">0</span>' +\n        '</span>' +\n        '<span class=\"irs-grid\"></span>' +\n        '<span class=\"irs-bar\"></span>';\n\n    var single_html =\n        '<span class=\"irs-bar-edge\"></span>' +\n        '<span class=\"irs-shadow shadow-single\"></span>' +\n        '<span class=\"irs-slider single\"></span>';\n\n    var double_html =\n        '<span class=\"irs-shadow shadow-from\"></span>' +\n        '<span class=\"irs-shadow shadow-to\"></span>' +\n        '<span class=\"irs-slider from\"></span>' +\n        '<span class=\"irs-slider to\"></span>';\n\n    var disable_html =\n        '<span class=\"irs-disable-mask\"></span>';\n\n\n\n    // =================================================================================================================\n    // Core\n\n    /**\n     * Main plugin constructor\n     *\n     * @param input {Object} link to base input element\n     * @param options {Object} slider config\n     * @param plugin_count {Number}\n     * @constructor\n     */\n    var IonRangeSlider = function (input, options, plugin_count) {\n        this.VERSION = \"2.2.0\";\n        this.input = input;\n        this.plugin_count = plugin_count;\n        this.current_plugin = 0;\n        this.calc_count = 0;\n        this.update_tm = 0;\n        this.old_from = 0;\n        this.old_to = 0;\n        this.old_min_interval = null;\n        this.raf_id = null;\n        this.dragging = false;\n        this.force_redraw = false;\n        this.no_diapason = false;\n        this.has_tab_index = true;\n        this.is_key = false;\n        this.is_update = false;\n        this.is_start = true;\n        this.is_finish = false;\n        this.is_active = false;\n        this.is_resize = false;\n        this.is_click = false;\n\n        options = options || {};\n\n        // cache for links to all DOM elements\n        this.$cache = {\n            win: $(window),\n            body: $(document.body),\n            input: $(input),\n            cont: null,\n            rs: null,\n            min: null,\n            max: null,\n            from: null,\n            to: null,\n            single: null,\n            bar: null,\n            line: null,\n            s_single: null,\n            s_from: null,\n            s_to: null,\n            shad_single: null,\n            shad_from: null,\n            shad_to: null,\n            edge: null,\n            grid: null,\n            grid_labels: []\n        };\n\n        // storage for measure variables\n        this.coords = {\n            // left\n            x_gap: 0,\n            x_pointer: 0,\n\n            // width\n            w_rs: 0,\n            w_rs_old: 0,\n            w_handle: 0,\n\n            // percents\n            p_gap: 0,\n            p_gap_left: 0,\n            p_gap_right: 0,\n            p_step: 0,\n            p_pointer: 0,\n            p_handle: 0,\n            p_single_fake: 0,\n            p_single_real: 0,\n            p_from_fake: 0,\n            p_from_real: 0,\n            p_to_fake: 0,\n            p_to_real: 0,\n            p_bar_x: 0,\n            p_bar_w: 0,\n\n            // grid\n            grid_gap: 0,\n            big_num: 0,\n            big: [],\n            big_w: [],\n            big_p: [],\n            big_x: []\n        };\n\n        // storage for labels measure variables\n        this.labels = {\n            // width\n            w_min: 0,\n            w_max: 0,\n            w_from: 0,\n            w_to: 0,\n            w_single: 0,\n\n            // percents\n            p_min: 0,\n            p_max: 0,\n            p_from_fake: 0,\n            p_from_left: 0,\n            p_to_fake: 0,\n            p_to_left: 0,\n            p_single_fake: 0,\n            p_single_left: 0\n        };\n\n\n\n        /**\n         * get and validate config\n         */\n        var $inp = this.$cache.input,\n            val = $inp.prop(\"value\"),\n            config, config_from_data, prop;\n\n        // default config\n        config = {\n            type: \"single\",\n\n            min: 10,\n            max: 100,\n            from: null,\n            to: null,\n            step: 1,\n\n            min_interval: 0,\n            max_interval: 0,\n            drag_interval: false,\n\n            values: [],\n            p_values: [],\n\n            from_fixed: false,\n            from_min: null,\n            from_max: null,\n            from_shadow: false,\n\n            to_fixed: false,\n            to_min: null,\n            to_max: null,\n            to_shadow: false,\n\n            prettify_enabled: true,\n            prettify_separator: \" \",\n            prettify: null,\n\n            force_edges: false,\n\n            keyboard: true,\n\n            grid: false,\n            grid_margin: true,\n            grid_num: 4,\n            grid_snap: false,\n\n            hide_min_max: false,\n            hide_from_to: false,\n\n            prefix: \"\",\n            postfix: \"\",\n            max_postfix: \"\",\n            decorate_both: true,\n            values_separator: \" — \",\n\n            input_values_separator: \";\",\n\n            disable: false,\n            block: false,\n\n            extra_classes: \"\",\n\n            scope: null,\n            onStart: null,\n            onChange: null,\n            onFinish: null,\n            onUpdate: null\n        };\n\n\n        // check if base element is input\n        if ($inp[0].nodeName !== \"INPUT\") {\n            console && console.warn && console.warn(\"Base element should be <input>!\", $inp[0]);\n        }\n\n\n        // config from data-attributes extends js config\n        config_from_data = {\n            type: $inp.data(\"type\"),\n\n            min: $inp.data(\"min\"),\n            max: $inp.data(\"max\"),\n            from: $inp.data(\"from\"),\n            to: $inp.data(\"to\"),\n            step: $inp.data(\"step\"),\n\n            min_interval: $inp.data(\"minInterval\"),\n            max_interval: $inp.data(\"maxInterval\"),\n            drag_interval: $inp.data(\"dragInterval\"),\n\n            values: $inp.data(\"values\"),\n\n            from_fixed: $inp.data(\"fromFixed\"),\n            from_min: $inp.data(\"fromMin\"),\n            from_max: $inp.data(\"fromMax\"),\n            from_shadow: $inp.data(\"fromShadow\"),\n\n            to_fixed: $inp.data(\"toFixed\"),\n            to_min: $inp.data(\"toMin\"),\n            to_max: $inp.data(\"toMax\"),\n            to_shadow: $inp.data(\"toShadow\"),\n\n            prettify_enabled: $inp.data(\"prettifyEnabled\"),\n            prettify_separator: $inp.data(\"prettifySeparator\"),\n\n            force_edges: $inp.data(\"forceEdges\"),\n\n            keyboard: $inp.data(\"keyboard\"),\n\n            grid: $inp.data(\"grid\"),\n            grid_margin: $inp.data(\"gridMargin\"),\n            grid_num: $inp.data(\"gridNum\"),\n            grid_snap: $inp.data(\"gridSnap\"),\n\n            hide_min_max: $inp.data(\"hideMinMax\"),\n            hide_from_to: $inp.data(\"hideFromTo\"),\n\n            prefix: $inp.data(\"prefix\"),\n            postfix: $inp.data(\"postfix\"),\n            max_postfix: $inp.data(\"maxPostfix\"),\n            decorate_both: $inp.data(\"decorateBoth\"),\n            values_separator: $inp.data(\"valuesSeparator\"),\n\n            input_values_separator: $inp.data(\"inputValuesSeparator\"),\n\n            disable: $inp.data(\"disable\"),\n            block: $inp.data(\"block\"),\n\n            extra_classes: $inp.data(\"extraClasses\"),\n        };\n        config_from_data.values = config_from_data.values && config_from_data.values.split(\",\");\n\n        for (prop in config_from_data) {\n            if (config_from_data.hasOwnProperty(prop)) {\n                if (config_from_data[prop] === undefined || config_from_data[prop] === \"\") {\n                    delete config_from_data[prop];\n                }\n            }\n        }\n\n\n        // input value extends default config\n        if (val !== undefined && val !== \"\") {\n            val = val.split(config_from_data.input_values_separator || options.input_values_separator || \";\");\n\n            if (val[0] && val[0] == +val[0]) {\n                val[0] = +val[0];\n            }\n            if (val[1] && val[1] == +val[1]) {\n                val[1] = +val[1];\n            }\n\n            if (options && options.values && options.values.length) {\n                config.from = val[0] && options.values.indexOf(val[0]);\n                config.to = val[1] && options.values.indexOf(val[1]);\n            } else {\n                config.from = val[0] && +val[0];\n                config.to = val[1] && +val[1];\n            }\n        }\n\n\n\n        // js config extends default config\n        $.extend(config, options);\n\n\n        // data config extends config\n        $.extend(config, config_from_data);\n        this.options = config;\n\n\n\n        // validate config, to be sure that all data types are correct\n        this.update_check = {};\n        this.validate();\n\n\n\n        // default result object, returned to callbacks\n        this.result = {\n            input: this.$cache.input,\n            slider: null,\n\n            min: this.options.min,\n            max: this.options.max,\n\n            from: this.options.from,\n            from_percent: 0,\n            from_value: null,\n\n            to: this.options.to,\n            to_percent: 0,\n            to_value: null\n        };\n\n\n\n        this.init();\n    };\n\n    IonRangeSlider.prototype = {\n\n        /**\n         * Starts or updates the plugin instance\n         *\n         * @param [is_update] {boolean}\n         */\n        init: function (is_update) {\n            this.no_diapason = false;\n            this.coords.p_step = this.convertToPercent(this.options.step, true);\n\n            this.target = \"base\";\n\n            this.toggleInput();\n            this.append();\n            this.setMinMax();\n\n            if (is_update) {\n                this.force_redraw = true;\n                this.calc(true);\n\n                // callbacks called\n                this.callOnUpdate();\n            } else {\n                this.force_redraw = true;\n                this.calc(true);\n\n                // callbacks called\n                this.callOnStart();\n            }\n\n            this.updateScene();\n        },\n\n        /**\n         * Appends slider template to a DOM\n         */\n        append: function () {\n            var container_html = '<span class=\"irs js-irs-' + this.plugin_count + ' ' + this.options.extra_classes + '\"></span>';\n            this.$cache.input.before(container_html);\n            this.$cache.input.prop(\"readonly\", true);\n            this.$cache.cont = this.$cache.input.prev();\n            this.result.slider = this.$cache.cont;\n\n            this.$cache.cont.html(base_html);\n            this.$cache.rs = this.$cache.cont.find(\".irs\");\n            this.$cache.min = this.$cache.cont.find(\".irs-min\");\n            this.$cache.max = this.$cache.cont.find(\".irs-max\");\n            this.$cache.from = this.$cache.cont.find(\".irs-from\");\n            this.$cache.to = this.$cache.cont.find(\".irs-to\");\n            this.$cache.single = this.$cache.cont.find(\".irs-single\");\n            this.$cache.bar = this.$cache.cont.find(\".irs-bar\");\n            this.$cache.line = this.$cache.cont.find(\".irs-line\");\n            this.$cache.grid = this.$cache.cont.find(\".irs-grid\");\n\n            if (this.options.type === \"single\") {\n                this.$cache.cont.append(single_html);\n                this.$cache.edge = this.$cache.cont.find(\".irs-bar-edge\");\n                this.$cache.s_single = this.$cache.cont.find(\".single\");\n                this.$cache.from[0].style.visibility = \"hidden\";\n                this.$cache.to[0].style.visibility = \"hidden\";\n                this.$cache.shad_single = this.$cache.cont.find(\".shadow-single\");\n            } else {\n                this.$cache.cont.append(double_html);\n                this.$cache.s_from = this.$cache.cont.find(\".from\");\n                this.$cache.s_to = this.$cache.cont.find(\".to\");\n                this.$cache.shad_from = this.$cache.cont.find(\".shadow-from\");\n                this.$cache.shad_to = this.$cache.cont.find(\".shadow-to\");\n\n                this.setTopHandler();\n            }\n\n            if (this.options.hide_from_to) {\n                this.$cache.from[0].style.display = \"none\";\n                this.$cache.to[0].style.display = \"none\";\n                this.$cache.single[0].style.display = \"none\";\n            }\n\n            this.appendGrid();\n\n            if (this.options.disable) {\n                this.appendDisableMask();\n                this.$cache.input[0].disabled = true;\n            } else {\n                this.$cache.input[0].disabled = false;\n                this.removeDisableMask();\n                this.bindEvents();\n            }\n\n            // block only if not disabled\n            if (!this.options.disable) {\n                if (this.options.block) {\n                    this.appendDisableMask();\n                } else {\n                    this.removeDisableMask();\n                }\n            }\n\n            if (this.options.drag_interval) {\n                this.$cache.bar[0].style.cursor = \"ew-resize\";\n            }\n        },\n\n        /**\n         * Determine which handler has a priority\n         * works only for double slider type\n         */\n        setTopHandler: function () {\n            var min = this.options.min,\n                max = this.options.max,\n                from = this.options.from,\n                to = this.options.to;\n\n            if (from > min && to === max) {\n                this.$cache.s_from.addClass(\"type_last\");\n            } else if (to < max) {\n                this.$cache.s_to.addClass(\"type_last\");\n            }\n        },\n\n        /**\n         * Determine which handles was clicked last\n         * and which handler should have hover effect\n         *\n         * @param target {String}\n         */\n        changeLevel: function (target) {\n            switch (target) {\n                case \"single\":\n                    this.coords.p_gap = this.toFixed(this.coords.p_pointer - this.coords.p_single_fake);\n                    this.$cache.s_single.addClass(\"state_hover\");\n                    break;\n                case \"from\":\n                    this.coords.p_gap = this.toFixed(this.coords.p_pointer - this.coords.p_from_fake);\n                    this.$cache.s_from.addClass(\"state_hover\");\n                    this.$cache.s_from.addClass(\"type_last\");\n                    this.$cache.s_to.removeClass(\"type_last\");\n                    break;\n                case \"to\":\n                    this.coords.p_gap = this.toFixed(this.coords.p_pointer - this.coords.p_to_fake);\n                    this.$cache.s_to.addClass(\"state_hover\");\n                    this.$cache.s_to.addClass(\"type_last\");\n                    this.$cache.s_from.removeClass(\"type_last\");\n                    break;\n                case \"both\":\n                    this.coords.p_gap_left = this.toFixed(this.coords.p_pointer - this.coords.p_from_fake);\n                    this.coords.p_gap_right = this.toFixed(this.coords.p_to_fake - this.coords.p_pointer);\n                    this.$cache.s_to.removeClass(\"type_last\");\n                    this.$cache.s_from.removeClass(\"type_last\");\n                    break;\n            }\n        },\n\n        /**\n         * Then slider is disabled\n         * appends extra layer with opacity\n         */\n        appendDisableMask: function () {\n            this.$cache.cont.append(disable_html);\n            this.$cache.cont.addClass(\"irs-disabled\");\n        },\n\n        /**\n         * Then slider is not disabled\n         * remove disable mask\n         */\n        removeDisableMask: function () {\n            this.$cache.cont.remove(\".irs-disable-mask\");\n            this.$cache.cont.removeClass(\"irs-disabled\");\n        },\n\n        /**\n         * Remove slider instance\n         * and unbind all events\n         */\n        remove: function () {\n            this.$cache.cont.remove();\n            this.$cache.cont = null;\n\n            this.$cache.line.off(\"keydown.irs_\" + this.plugin_count);\n\n            this.$cache.body.off(\"touchmove.irs_\" + this.plugin_count);\n            this.$cache.body.off(\"mousemove.irs_\" + this.plugin_count);\n\n            this.$cache.win.off(\"touchend.irs_\" + this.plugin_count);\n            this.$cache.win.off(\"mouseup.irs_\" + this.plugin_count);\n\n            if (is_old_ie) {\n                this.$cache.body.off(\"mouseup.irs_\" + this.plugin_count);\n                this.$cache.body.off(\"mouseleave.irs_\" + this.plugin_count);\n            }\n\n            this.$cache.grid_labels = [];\n            this.coords.big = [];\n            this.coords.big_w = [];\n            this.coords.big_p = [];\n            this.coords.big_x = [];\n\n            cancelAnimationFrame(this.raf_id);\n        },\n\n        /**\n         * bind all slider events\n         */\n        bindEvents: function () {\n            if (this.no_diapason) {\n                return;\n            }\n\n            this.$cache.body.on(\"touchmove.irs_\" + this.plugin_count, this.pointerMove.bind(this));\n            this.$cache.body.on(\"mousemove.irs_\" + this.plugin_count, this.pointerMove.bind(this));\n\n            this.$cache.win.on(\"touchend.irs_\" + this.plugin_count, this.pointerUp.bind(this));\n            this.$cache.win.on(\"mouseup.irs_\" + this.plugin_count, this.pointerUp.bind(this));\n\n            this.$cache.line.on(\"touchstart.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n            this.$cache.line.on(\"mousedown.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n\n            this.$cache.line.on(\"focus.irs_\" + this.plugin_count, this.pointerFocus.bind(this));\n\n            if (this.options.drag_interval && this.options.type === \"double\") {\n                this.$cache.bar.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"both\"));\n                this.$cache.bar.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"both\"));\n            } else {\n                this.$cache.bar.on(\"touchstart.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n                this.$cache.bar.on(\"mousedown.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n            }\n\n            if (this.options.type === \"single\") {\n                this.$cache.single.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"single\"));\n                this.$cache.s_single.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"single\"));\n                this.$cache.shad_single.on(\"touchstart.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n\n                this.$cache.single.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"single\"));\n                this.$cache.s_single.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"single\"));\n                this.$cache.edge.on(\"mousedown.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n                this.$cache.shad_single.on(\"mousedown.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n            } else {\n                this.$cache.single.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, null));\n                this.$cache.single.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, null));\n\n                this.$cache.from.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"from\"));\n                this.$cache.s_from.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"from\"));\n                this.$cache.to.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"to\"));\n                this.$cache.s_to.on(\"touchstart.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"to\"));\n                this.$cache.shad_from.on(\"touchstart.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n                this.$cache.shad_to.on(\"touchstart.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n\n                this.$cache.from.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"from\"));\n                this.$cache.s_from.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"from\"));\n                this.$cache.to.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"to\"));\n                this.$cache.s_to.on(\"mousedown.irs_\" + this.plugin_count, this.pointerDown.bind(this, \"to\"));\n                this.$cache.shad_from.on(\"mousedown.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n                this.$cache.shad_to.on(\"mousedown.irs_\" + this.plugin_count, this.pointerClick.bind(this, \"click\"));\n            }\n\n            if (this.options.keyboard) {\n                this.$cache.line.on(\"keydown.irs_\" + this.plugin_count, this.key.bind(this, \"keyboard\"));\n            }\n\n            if (is_old_ie) {\n                this.$cache.body.on(\"mouseup.irs_\" + this.plugin_count, this.pointerUp.bind(this));\n                this.$cache.body.on(\"mouseleave.irs_\" + this.plugin_count, this.pointerUp.bind(this));\n            }\n        },\n\n        /**\n         * Focus with tabIndex\n         *\n         * @param e {Object} event object\n         */\n        pointerFocus: function (e) {\n            if (!this.target) {\n                var x;\n                var $handle;\n\n                if (this.options.type === \"single\") {\n                    $handle = this.$cache.single;\n                } else {\n                    $handle = this.$cache.from;\n                }\n\n                x = $handle.offset().left;\n                x += ($handle.width() / 2) - 1;\n\n                this.pointerClick(\"single\", {preventDefault: function () {}, pageX: x});\n            }\n        },\n\n        /**\n         * Mousemove or touchmove\n         * only for handlers\n         *\n         * @param e {Object} event object\n         */\n        pointerMove: function (e) {\n            if (!this.dragging) {\n                return;\n            }\n\n            var x = e.pageX || e.originalEvent.touches && e.originalEvent.touches[0].pageX;\n            this.coords.x_pointer = x - this.coords.x_gap;\n\n            this.calc();\n        },\n\n        /**\n         * Mouseup or touchend\n         * only for handlers\n         *\n         * @param e {Object} event object\n         */\n        pointerUp: function (e) {\n            if (this.current_plugin !== this.plugin_count) {\n                return;\n            }\n\n            if (this.is_active) {\n                this.is_active = false;\n            } else {\n                return;\n            }\n\n            this.$cache.cont.find(\".state_hover\").removeClass(\"state_hover\");\n\n            this.force_redraw = true;\n\n            if (is_old_ie) {\n                $(\"*\").prop(\"unselectable\", false);\n            }\n\n            this.updateScene();\n            this.restoreOriginalMinInterval();\n\n            // callbacks call\n            if ($.contains(this.$cache.cont[0], e.target) || this.dragging) {\n                this.callOnFinish();\n            }\n            \n            this.dragging = false;\n        },\n\n        /**\n         * Mousedown or touchstart\n         * only for handlers\n         *\n         * @param target {String|null}\n         * @param e {Object} event object\n         */\n        pointerDown: function (target, e) {\n            e.preventDefault();\n            var x = e.pageX || e.originalEvent.touches && e.originalEvent.touches[0].pageX;\n            if (e.button === 2) {\n                return;\n            }\n\n            if (target === \"both\") {\n                this.setTempMinInterval();\n            }\n\n            if (!target) {\n                target = this.target || \"from\";\n            }\n\n            this.current_plugin = this.plugin_count;\n            this.target = target;\n\n            this.is_active = true;\n            this.dragging = true;\n\n            this.coords.x_gap = this.$cache.rs.offset().left;\n            this.coords.x_pointer = x - this.coords.x_gap;\n\n            this.calcPointerPercent();\n            this.changeLevel(target);\n\n            if (is_old_ie) {\n                $(\"*\").prop(\"unselectable\", true);\n            }\n\n            this.$cache.line.trigger(\"focus\");\n\n            this.updateScene();\n        },\n\n        /**\n         * Mousedown or touchstart\n         * for other slider elements, like diapason line\n         *\n         * @param target {String}\n         * @param e {Object} event object\n         */\n        pointerClick: function (target, e) {\n            e.preventDefault();\n            var x = e.pageX || e.originalEvent.touches && e.originalEvent.touches[0].pageX;\n            if (e.button === 2) {\n                return;\n            }\n\n            this.current_plugin = this.plugin_count;\n            this.target = target;\n\n            this.is_click = true;\n            this.coords.x_gap = this.$cache.rs.offset().left;\n            this.coords.x_pointer = +(x - this.coords.x_gap).toFixed();\n\n            this.force_redraw = true;\n            this.calc();\n\n            this.$cache.line.trigger(\"focus\");\n        },\n\n        /**\n         * Keyborard controls for focused slider\n         *\n         * @param target {String}\n         * @param e {Object} event object\n         * @returns {boolean|undefined}\n         */\n        key: function (target, e) {\n            if (this.current_plugin !== this.plugin_count || e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {\n                return;\n            }\n\n            switch (e.which) {\n                case 83: // W\n                case 65: // A\n                case 40: // DOWN\n                case 37: // LEFT\n                    e.preventDefault();\n                    this.moveByKey(false);\n                    break;\n\n                case 87: // S\n                case 68: // D\n                case 38: // UP\n                case 39: // RIGHT\n                    e.preventDefault();\n                    this.moveByKey(true);\n                    break;\n            }\n\n            return true;\n        },\n\n        /**\n         * Move by key\n         *\n         * @param right {boolean} direction to move\n         */\n        moveByKey: function (right) {\n            var p = this.coords.p_pointer;\n            var p_step = (this.options.max - this.options.min) / 100;\n            p_step = this.options.step / p_step;\n\n            if (right) {\n                p += p_step;\n            } else {\n                p -= p_step;\n            }\n\n            this.coords.x_pointer = this.toFixed(this.coords.w_rs / 100 * p);\n            this.is_key = true;\n            this.calc();\n        },\n\n        /**\n         * Set visibility and content\n         * of Min and Max labels\n         */\n        setMinMax: function () {\n            if (!this.options) {\n                return;\n            }\n\n            if (this.options.hide_min_max) {\n                this.$cache.min[0].style.display = \"none\";\n                this.$cache.max[0].style.display = \"none\";\n                return;\n            }\n\n            if (this.options.values.length) {\n                this.$cache.min.html(this.decorate(this.options.p_values[this.options.min]));\n                this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]));\n            } else {\n                var min_pretty = this._prettify(this.options.min);\n                var max_pretty = this._prettify(this.options.max);\n\n                this.result.min_pretty = min_pretty;\n                this.result.max_pretty = max_pretty;\n\n                this.$cache.min.html(this.decorate(min_pretty, this.options.min));\n                this.$cache.max.html(this.decorate(max_pretty, this.options.max));\n            }\n\n            this.labels.w_min = this.$cache.min.outerWidth(false);\n            this.labels.w_max = this.$cache.max.outerWidth(false);\n        },\n\n        /**\n         * Then dragging interval, prevent interval collapsing\n         * using min_interval option\n         */\n        setTempMinInterval: function () {\n            var interval = this.result.to - this.result.from;\n\n            if (this.old_min_interval === null) {\n                this.old_min_interval = this.options.min_interval;\n            }\n\n            this.options.min_interval = interval;\n        },\n\n        /**\n         * Restore min_interval option to original\n         */\n        restoreOriginalMinInterval: function () {\n            if (this.old_min_interval !== null) {\n                this.options.min_interval = this.old_min_interval;\n                this.old_min_interval = null;\n            }\n        },\n\n\n\n        // =============================================================================================================\n        // Calculations\n\n        /**\n         * All calculations and measures start here\n         *\n         * @param update {boolean=}\n         */\n        calc: function (update) {\n            if (!this.options) {\n                return;\n            }\n\n            this.calc_count++;\n\n            if (this.calc_count === 10 || update) {\n                this.calc_count = 0;\n                this.coords.w_rs = this.$cache.rs.outerWidth(false);\n\n                this.calcHandlePercent();\n            }\n\n            if (!this.coords.w_rs) {\n                return;\n            }\n\n            this.calcPointerPercent();\n            var handle_x = this.getHandleX();\n\n\n            if (this.target === \"both\") {\n                this.coords.p_gap = 0;\n                handle_x = this.getHandleX();\n            }\n\n            if (this.target === \"click\") {\n                this.coords.p_gap = this.coords.p_handle / 2;\n                handle_x = this.getHandleX();\n\n                if (this.options.drag_interval) {\n                    this.target = \"both_one\";\n                } else {\n                    this.target = this.chooseHandle(handle_x);\n                }\n            }\n\n            switch (this.target) {\n                case \"base\":\n                    var w = (this.options.max - this.options.min) / 100,\n                        f = (this.result.from - this.options.min) / w,\n                        t = (this.result.to - this.options.min) / w;\n\n                    this.coords.p_single_real = this.toFixed(f);\n                    this.coords.p_from_real = this.toFixed(f);\n                    this.coords.p_to_real = this.toFixed(t);\n\n                    this.coords.p_single_real = this.checkDiapason(this.coords.p_single_real, this.options.from_min, this.options.from_max);\n                    this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max);\n                    this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max);\n\n                    this.coords.p_single_fake = this.convertToFakePercent(this.coords.p_single_real);\n                    this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real);\n                    this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);\n\n                    this.target = null;\n\n                    break;\n\n                case \"single\":\n                    if (this.options.from_fixed) {\n                        break;\n                    }\n\n                    this.coords.p_single_real = this.convertToRealPercent(handle_x);\n                    this.coords.p_single_real = this.calcWithStep(this.coords.p_single_real);\n                    this.coords.p_single_real = this.checkDiapason(this.coords.p_single_real, this.options.from_min, this.options.from_max);\n\n                    this.coords.p_single_fake = this.convertToFakePercent(this.coords.p_single_real);\n\n                    break;\n\n                case \"from\":\n                    if (this.options.from_fixed) {\n                        break;\n                    }\n\n                    this.coords.p_from_real = this.convertToRealPercent(handle_x);\n                    this.coords.p_from_real = this.calcWithStep(this.coords.p_from_real);\n                    if (this.coords.p_from_real > this.coords.p_to_real) {\n                        this.coords.p_from_real = this.coords.p_to_real;\n                    }\n                    this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max);\n                    this.coords.p_from_real = this.checkMinInterval(this.coords.p_from_real, this.coords.p_to_real, \"from\");\n                    this.coords.p_from_real = this.checkMaxInterval(this.coords.p_from_real, this.coords.p_to_real, \"from\");\n\n                    this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real);\n\n                    break;\n\n                case \"to\":\n                    if (this.options.to_fixed) {\n                        break;\n                    }\n\n                    this.coords.p_to_real = this.convertToRealPercent(handle_x);\n                    this.coords.p_to_real = this.calcWithStep(this.coords.p_to_real);\n                    if (this.coords.p_to_real < this.coords.p_from_real) {\n                        this.coords.p_to_real = this.coords.p_from_real;\n                    }\n                    this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max);\n                    this.coords.p_to_real = this.checkMinInterval(this.coords.p_to_real, this.coords.p_from_real, \"to\");\n                    this.coords.p_to_real = this.checkMaxInterval(this.coords.p_to_real, this.coords.p_from_real, \"to\");\n\n                    this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);\n\n                    break;\n\n                case \"both\":\n                    if (this.options.from_fixed || this.options.to_fixed) {\n                        break;\n                    }\n\n                    handle_x = this.toFixed(handle_x + (this.coords.p_handle * 0.001));\n\n                    this.coords.p_from_real = this.convertToRealPercent(handle_x) - this.coords.p_gap_left;\n                    this.coords.p_from_real = this.calcWithStep(this.coords.p_from_real);\n                    this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max);\n                    this.coords.p_from_real = this.checkMinInterval(this.coords.p_from_real, this.coords.p_to_real, \"from\");\n                    this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real);\n\n                    this.coords.p_to_real = this.convertToRealPercent(handle_x) + this.coords.p_gap_right;\n                    this.coords.p_to_real = this.calcWithStep(this.coords.p_to_real);\n                    this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max);\n                    this.coords.p_to_real = this.checkMinInterval(this.coords.p_to_real, this.coords.p_from_real, \"to\");\n                    this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);\n\n                    break;\n\n                case \"both_one\":\n                    if (this.options.from_fixed || this.options.to_fixed) {\n                        break;\n                    }\n\n                    var real_x = this.convertToRealPercent(handle_x),\n                        from = this.result.from_percent,\n                        to = this.result.to_percent,\n                        full = to - from,\n                        half = full / 2,\n                        new_from = real_x - half,\n                        new_to = real_x + half;\n\n                    if (new_from < 0) {\n                        new_from = 0;\n                        new_to = new_from + full;\n                    }\n\n                    if (new_to > 100) {\n                        new_to = 100;\n                        new_from = new_to - full;\n                    }\n\n                    this.coords.p_from_real = this.calcWithStep(new_from);\n                    this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max);\n                    this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real);\n\n                    this.coords.p_to_real = this.calcWithStep(new_to);\n                    this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max);\n                    this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);\n\n                    break;\n            }\n\n            if (this.options.type === \"single\") {\n                this.coords.p_bar_x = (this.coords.p_handle / 2);\n                this.coords.p_bar_w = this.coords.p_single_fake;\n\n                this.result.from_percent = this.coords.p_single_real;\n                this.result.from = this.convertToValue(this.coords.p_single_real);\n                this.result.from_pretty = this._prettify(this.result.from);\n\n                if (this.options.values.length) {\n                    this.result.from_value = this.options.values[this.result.from];\n                }\n            } else {\n                this.coords.p_bar_x = this.toFixed(this.coords.p_from_fake + (this.coords.p_handle / 2));\n                this.coords.p_bar_w = this.toFixed(this.coords.p_to_fake - this.coords.p_from_fake);\n\n                this.result.from_percent = this.coords.p_from_real;\n                this.result.from = this.convertToValue(this.coords.p_from_real);\n                this.result.from_pretty = this._prettify(this.result.from);\n                this.result.to_percent = this.coords.p_to_real;\n                this.result.to = this.convertToValue(this.coords.p_to_real);\n                this.result.to_pretty = this._prettify(this.result.to);\n\n                if (this.options.values.length) {\n                    this.result.from_value = this.options.values[this.result.from];\n                    this.result.to_value = this.options.values[this.result.to];\n                }\n            }\n\n            this.calcMinMax();\n            this.calcLabels();\n        },\n\n\n        /**\n         * calculates pointer X in percent\n         */\n        calcPointerPercent: function () {\n            if (!this.coords.w_rs) {\n                this.coords.p_pointer = 0;\n                return;\n            }\n\n            if (this.coords.x_pointer < 0 || isNaN(this.coords.x_pointer)  ) {\n                this.coords.x_pointer = 0;\n            } else if (this.coords.x_pointer > this.coords.w_rs) {\n                this.coords.x_pointer = this.coords.w_rs;\n            }\n\n            this.coords.p_pointer = this.toFixed(this.coords.x_pointer / this.coords.w_rs * 100);\n        },\n\n        convertToRealPercent: function (fake) {\n            var full = 100 - this.coords.p_handle;\n            return fake / full * 100;\n        },\n\n        convertToFakePercent: function (real) {\n            var full = 100 - this.coords.p_handle;\n            return real / 100 * full;\n        },\n\n        getHandleX: function () {\n            var max = 100 - this.coords.p_handle,\n                x = this.toFixed(this.coords.p_pointer - this.coords.p_gap);\n\n            if (x < 0) {\n                x = 0;\n            } else if (x > max) {\n                x = max;\n            }\n\n            return x;\n        },\n\n        calcHandlePercent: function () {\n            if (this.options.type === \"single\") {\n                this.coords.w_handle = this.$cache.s_single.outerWidth(false);\n            } else {\n                this.coords.w_handle = this.$cache.s_from.outerWidth(false);\n            }\n\n            this.coords.p_handle = this.toFixed(this.coords.w_handle / this.coords.w_rs * 100);\n        },\n\n        /**\n         * Find closest handle to pointer click\n         *\n         * @param real_x {Number}\n         * @returns {String}\n         */\n        chooseHandle: function (real_x) {\n            if (this.options.type === \"single\") {\n                return \"single\";\n            } else {\n                var m_point = this.coords.p_from_real + ((this.coords.p_to_real - this.coords.p_from_real) / 2);\n                if (real_x >= m_point) {\n                    return this.options.to_fixed ? \"from\" : \"to\";\n                } else {\n                    return this.options.from_fixed ? \"to\" : \"from\";\n                }\n            }\n        },\n\n        /**\n         * Measure Min and Max labels width in percent\n         */\n        calcMinMax: function () {\n            if (!this.coords.w_rs) {\n                return;\n            }\n\n            this.labels.p_min = this.labels.w_min / this.coords.w_rs * 100;\n            this.labels.p_max = this.labels.w_max / this.coords.w_rs * 100;\n        },\n\n        /**\n         * Measure labels width and X in percent\n         */\n        calcLabels: function () {\n            if (!this.coords.w_rs || this.options.hide_from_to) {\n                return;\n            }\n\n            if (this.options.type === \"single\") {\n\n                this.labels.w_single = this.$cache.single.outerWidth(false);\n                this.labels.p_single_fake = this.labels.w_single / this.coords.w_rs * 100;\n                this.labels.p_single_left = this.coords.p_single_fake + (this.coords.p_handle / 2) - (this.labels.p_single_fake / 2);\n                this.labels.p_single_left = this.checkEdges(this.labels.p_single_left, this.labels.p_single_fake);\n\n            } else {\n\n                this.labels.w_from = this.$cache.from.outerWidth(false);\n                this.labels.p_from_fake = this.labels.w_from / this.coords.w_rs * 100;\n                this.labels.p_from_left = this.coords.p_from_fake + (this.coords.p_handle / 2) - (this.labels.p_from_fake / 2);\n                this.labels.p_from_left = this.toFixed(this.labels.p_from_left);\n                this.labels.p_from_left = this.checkEdges(this.labels.p_from_left, this.labels.p_from_fake);\n\n                this.labels.w_to = this.$cache.to.outerWidth(false);\n                this.labels.p_to_fake = this.labels.w_to / this.coords.w_rs * 100;\n                this.labels.p_to_left = this.coords.p_to_fake + (this.coords.p_handle / 2) - (this.labels.p_to_fake / 2);\n                this.labels.p_to_left = this.toFixed(this.labels.p_to_left);\n                this.labels.p_to_left = this.checkEdges(this.labels.p_to_left, this.labels.p_to_fake);\n\n                this.labels.w_single = this.$cache.single.outerWidth(false);\n                this.labels.p_single_fake = this.labels.w_single / this.coords.w_rs * 100;\n                this.labels.p_single_left = ((this.labels.p_from_left + this.labels.p_to_left + this.labels.p_to_fake) / 2) - (this.labels.p_single_fake / 2);\n                this.labels.p_single_left = this.toFixed(this.labels.p_single_left);\n                this.labels.p_single_left = this.checkEdges(this.labels.p_single_left, this.labels.p_single_fake);\n\n            }\n        },\n\n\n\n        // =============================================================================================================\n        // Drawings\n\n        /**\n         * Main function called in request animation frame\n         * to update everything\n         */\n        updateScene: function () {\n            if (this.raf_id) {\n                cancelAnimationFrame(this.raf_id);\n                this.raf_id = null;\n            }\n\n            clearTimeout(this.update_tm);\n            this.update_tm = null;\n\n            if (!this.options) {\n                return;\n            }\n\n            this.drawHandles();\n\n            if (this.is_active) {\n                this.raf_id = requestAnimationFrame(this.updateScene.bind(this));\n            } else {\n                this.update_tm = setTimeout(this.updateScene.bind(this), 300);\n            }\n        },\n\n        /**\n         * Draw handles\n         */\n        drawHandles: function () {\n            this.coords.w_rs = this.$cache.rs.outerWidth(false);\n\n            if (!this.coords.w_rs) {\n                return;\n            }\n\n            if (this.coords.w_rs !== this.coords.w_rs_old) {\n                this.target = \"base\";\n                this.is_resize = true;\n            }\n\n            if (this.coords.w_rs !== this.coords.w_rs_old || this.force_redraw) {\n                this.setMinMax();\n                this.calc(true);\n                this.drawLabels();\n                if (this.options.grid) {\n                    this.calcGridMargin();\n                    this.calcGridLabels();\n                }\n                this.force_redraw = true;\n                this.coords.w_rs_old = this.coords.w_rs;\n                this.drawShadow();\n            }\n\n            if (!this.coords.w_rs) {\n                return;\n            }\n\n            if (!this.dragging && !this.force_redraw && !this.is_key) {\n                return;\n            }\n\n            if (this.old_from !== this.result.from || this.old_to !== this.result.to || this.force_redraw || this.is_key) {\n\n                this.drawLabels();\n\n                this.$cache.bar[0].style.left = this.coords.p_bar_x + \"%\";\n                this.$cache.bar[0].style.width = this.coords.p_bar_w + \"%\";\n\n                if (this.options.type === \"single\") {\n                    this.$cache.s_single[0].style.left = this.coords.p_single_fake + \"%\";\n\n                    this.$cache.single[0].style.left = this.labels.p_single_left + \"%\";\n                } else {\n                    this.$cache.s_from[0].style.left = this.coords.p_from_fake + \"%\";\n                    this.$cache.s_to[0].style.left = this.coords.p_to_fake + \"%\";\n\n                    if (this.old_from !== this.result.from || this.force_redraw) {\n                        this.$cache.from[0].style.left = this.labels.p_from_left + \"%\";\n                    }\n                    if (this.old_to !== this.result.to || this.force_redraw) {\n                        this.$cache.to[0].style.left = this.labels.p_to_left + \"%\";\n                    }\n\n                    this.$cache.single[0].style.left = this.labels.p_single_left + \"%\";\n                }\n\n                this.writeToInput();\n\n                if ((this.old_from !== this.result.from || this.old_to !== this.result.to) && !this.is_start) {\n                    this.$cache.input.trigger(\"change\");\n                    this.$cache.input.trigger(\"input\");\n                }\n\n                this.old_from = this.result.from;\n                this.old_to = this.result.to;\n\n                // callbacks call\n                if (!this.is_resize && !this.is_update && !this.is_start && !this.is_finish) {\n                    this.callOnChange();\n                }\n                if (this.is_key || this.is_click) {\n                    this.is_key = false;\n                    this.is_click = false;\n                    this.callOnFinish();\n                }\n\n                this.is_update = false;\n                this.is_resize = false;\n                this.is_finish = false;\n            }\n\n            this.is_start = false;\n            this.is_key = false;\n            this.is_click = false;\n            this.force_redraw = false;\n        },\n\n        /**\n         * Draw labels\n         * measure labels collisions\n         * collapse close labels\n         */\n        drawLabels: function () {\n            if (!this.options) {\n                return;\n            }\n\n            var values_num = this.options.values.length;\n            var p_values = this.options.p_values;\n            var text_single;\n            var text_from;\n            var text_to;\n            var from_pretty;\n            var to_pretty;\n\n            if (this.options.hide_from_to) {\n                return;\n            }\n\n            if (this.options.type === \"single\") {\n\n                if (values_num) {\n                    text_single = this.decorate(p_values[this.result.from]);\n                    this.$cache.single.html(text_single);\n                } else {\n                    from_pretty = this._prettify(this.result.from);\n\n                    text_single = this.decorate(from_pretty, this.result.from);\n                    this.$cache.single.html(text_single);\n                }\n\n                this.calcLabels();\n\n                if (this.labels.p_single_left < this.labels.p_min + 1) {\n                    this.$cache.min[0].style.visibility = \"hidden\";\n                } else {\n                    this.$cache.min[0].style.visibility = \"visible\";\n                }\n\n                if (this.labels.p_single_left + this.labels.p_single_fake > 100 - this.labels.p_max - 1) {\n                    this.$cache.max[0].style.visibility = \"hidden\";\n                } else {\n                    this.$cache.max[0].style.visibility = \"visible\";\n                }\n\n            } else {\n\n                if (values_num) {\n\n                    if (this.options.decorate_both) {\n                        text_single = this.decorate(p_values[this.result.from]);\n                        text_single += this.options.values_separator;\n                        text_single += this.decorate(p_values[this.result.to]);\n                    } else {\n                        text_single = this.decorate(p_values[this.result.from] + this.options.values_separator + p_values[this.result.to]);\n                    }\n                    text_from = this.decorate(p_values[this.result.from]);\n                    text_to = this.decorate(p_values[this.result.to]);\n\n                    this.$cache.single.html(text_single);\n                    this.$cache.from.html(text_from);\n                    this.$cache.to.html(text_to);\n\n                } else {\n                    from_pretty = this._prettify(this.result.from);\n                    to_pretty = this._prettify(this.result.to);\n\n                    if (this.options.decorate_both) {\n                        text_single = this.decorate(from_pretty, this.result.from);\n                        text_single += this.options.values_separator;\n                        text_single += this.decorate(to_pretty, this.result.to);\n                    } else {\n                        text_single = this.decorate(from_pretty + this.options.values_separator + to_pretty, this.result.to);\n                    }\n                    text_from = this.decorate(from_pretty, this.result.from);\n                    text_to = this.decorate(to_pretty, this.result.to);\n\n                    this.$cache.single.html(text_single);\n                    this.$cache.from.html(text_from);\n                    this.$cache.to.html(text_to);\n\n                }\n\n                this.calcLabels();\n\n                var min = Math.min(this.labels.p_single_left, this.labels.p_from_left),\n                    single_left = this.labels.p_single_left + this.labels.p_single_fake,\n                    to_left = this.labels.p_to_left + this.labels.p_to_fake,\n                    max = Math.max(single_left, to_left);\n\n                if (this.labels.p_from_left + this.labels.p_from_fake >= this.labels.p_to_left) {\n                    this.$cache.from[0].style.visibility = \"hidden\";\n                    this.$cache.to[0].style.visibility = \"hidden\";\n                    this.$cache.single[0].style.visibility = \"visible\";\n\n                    if (this.result.from === this.result.to) {\n                        if (this.target === \"from\") {\n                            this.$cache.from[0].style.visibility = \"visible\";\n                        } else if (this.target === \"to\") {\n                            this.$cache.to[0].style.visibility = \"visible\";\n                        } else if (!this.target) {\n                            this.$cache.from[0].style.visibility = \"visible\";\n                        }\n                        this.$cache.single[0].style.visibility = \"hidden\";\n                        max = to_left;\n                    } else {\n                        this.$cache.from[0].style.visibility = \"hidden\";\n                        this.$cache.to[0].style.visibility = \"hidden\";\n                        this.$cache.single[0].style.visibility = \"visible\";\n                        max = Math.max(single_left, to_left);\n                    }\n                } else {\n                    this.$cache.from[0].style.visibility = \"visible\";\n                    this.$cache.to[0].style.visibility = \"visible\";\n                    this.$cache.single[0].style.visibility = \"hidden\";\n                }\n\n                if (min < this.labels.p_min + 1) {\n                    this.$cache.min[0].style.visibility = \"hidden\";\n                } else {\n                    this.$cache.min[0].style.visibility = \"visible\";\n                }\n\n                if (max > 100 - this.labels.p_max - 1) {\n                    this.$cache.max[0].style.visibility = \"hidden\";\n                } else {\n                    this.$cache.max[0].style.visibility = \"visible\";\n                }\n\n            }\n        },\n\n        /**\n         * Draw shadow intervals\n         */\n        drawShadow: function () {\n            var o = this.options,\n                c = this.$cache,\n\n                is_from_min = typeof o.from_min === \"number\" && !isNaN(o.from_min),\n                is_from_max = typeof o.from_max === \"number\" && !isNaN(o.from_max),\n                is_to_min = typeof o.to_min === \"number\" && !isNaN(o.to_min),\n                is_to_max = typeof o.to_max === \"number\" && !isNaN(o.to_max),\n\n                from_min,\n                from_max,\n                to_min,\n                to_max;\n\n            if (o.type === \"single\") {\n                if (o.from_shadow && (is_from_min || is_from_max)) {\n                    from_min = this.convertToPercent(is_from_min ? o.from_min : o.min);\n                    from_max = this.convertToPercent(is_from_max ? o.from_max : o.max) - from_min;\n                    from_min = this.toFixed(from_min - (this.coords.p_handle / 100 * from_min));\n                    from_max = this.toFixed(from_max - (this.coords.p_handle / 100 * from_max));\n                    from_min = from_min + (this.coords.p_handle / 2);\n\n                    c.shad_single[0].style.display = \"block\";\n                    c.shad_single[0].style.left = from_min + \"%\";\n                    c.shad_single[0].style.width = from_max + \"%\";\n                } else {\n                    c.shad_single[0].style.display = \"none\";\n                }\n            } else {\n                if (o.from_shadow && (is_from_min || is_from_max)) {\n                    from_min = this.convertToPercent(is_from_min ? o.from_min : o.min);\n                    from_max = this.convertToPercent(is_from_max ? o.from_max : o.max) - from_min;\n                    from_min = this.toFixed(from_min - (this.coords.p_handle / 100 * from_min));\n                    from_max = this.toFixed(from_max - (this.coords.p_handle / 100 * from_max));\n                    from_min = from_min + (this.coords.p_handle / 2);\n\n                    c.shad_from[0].style.display = \"block\";\n                    c.shad_from[0].style.left = from_min + \"%\";\n                    c.shad_from[0].style.width = from_max + \"%\";\n                } else {\n                    c.shad_from[0].style.display = \"none\";\n                }\n\n                if (o.to_shadow && (is_to_min || is_to_max)) {\n                    to_min = this.convertToPercent(is_to_min ? o.to_min : o.min);\n                    to_max = this.convertToPercent(is_to_max ? o.to_max : o.max) - to_min;\n                    to_min = this.toFixed(to_min - (this.coords.p_handle / 100 * to_min));\n                    to_max = this.toFixed(to_max - (this.coords.p_handle / 100 * to_max));\n                    to_min = to_min + (this.coords.p_handle / 2);\n\n                    c.shad_to[0].style.display = \"block\";\n                    c.shad_to[0].style.left = to_min + \"%\";\n                    c.shad_to[0].style.width = to_max + \"%\";\n                } else {\n                    c.shad_to[0].style.display = \"none\";\n                }\n            }\n        },\n\n\n\n        /**\n         * Write values to input element\n         */\n        writeToInput: function () {\n            if (this.options.type === \"single\") {\n                if (this.options.values.length) {\n                    this.$cache.input.prop(\"value\", this.result.from_value);\n                } else {\n                    this.$cache.input.prop(\"value\", this.result.from);\n                }\n                this.$cache.input.data(\"from\", this.result.from);\n            } else {\n                if (this.options.values.length) {\n                    this.$cache.input.prop(\"value\", this.result.from_value + this.options.input_values_separator + this.result.to_value);\n                } else {\n                    this.$cache.input.prop(\"value\", this.result.from + this.options.input_values_separator + this.result.to);\n                }\n                this.$cache.input.data(\"from\", this.result.from);\n                this.$cache.input.data(\"to\", this.result.to);\n            }\n        },\n\n\n\n        // =============================================================================================================\n        // Callbacks\n\n        callOnStart: function () {\n            this.writeToInput();\n\n            if (this.options.onStart && typeof this.options.onStart === \"function\") {\n                if (this.options.scope) {\n                    this.options.onStart.call(this.options.scope, this.result);\n                } else {\n                    this.options.onStart(this.result);\n                }\n            }\n        },\n        callOnChange: function () {\n            this.writeToInput();\n\n            if (this.options.onChange && typeof this.options.onChange === \"function\") {\n                if (this.options.scope) {\n                    this.options.onChange.call(this.options.scope, this.result);\n                } else {\n                    this.options.onChange(this.result);\n                }\n            }\n        },\n        callOnFinish: function () {\n            this.writeToInput();\n\n            if (this.options.onFinish && typeof this.options.onFinish === \"function\") {\n                if (this.options.scope) {\n                    this.options.onFinish.call(this.options.scope, this.result);\n                } else {\n                    this.options.onFinish(this.result);\n                }\n            }\n        },\n        callOnUpdate: function () {\n            this.writeToInput();\n\n            if (this.options.onUpdate && typeof this.options.onUpdate === \"function\") {\n                if (this.options.scope) {\n                    this.options.onUpdate.call(this.options.scope, this.result);\n                } else {\n                    this.options.onUpdate(this.result);\n                }\n            }\n        },\n\n\n\n\n        // =============================================================================================================\n        // Service methods\n\n        toggleInput: function () {\n            this.$cache.input.toggleClass(\"irs-hidden-input\");\n\n            if (this.has_tab_index) {\n                this.$cache.input.prop(\"tabindex\", -1);\n            } else {\n                this.$cache.input.removeProp(\"tabindex\");\n            }\n\n            this.has_tab_index = !this.has_tab_index;\n        },\n\n        /**\n         * Convert real value to percent\n         *\n         * @param value {Number} X in real\n         * @param no_min {boolean=} don't use min value\n         * @returns {Number} X in percent\n         */\n        convertToPercent: function (value, no_min) {\n            var diapason = this.options.max - this.options.min,\n                one_percent = diapason / 100,\n                val, percent;\n\n            if (!diapason) {\n                this.no_diapason = true;\n                return 0;\n            }\n\n            if (no_min) {\n                val = value;\n            } else {\n                val = value - this.options.min;\n            }\n\n            percent = val / one_percent;\n\n            return this.toFixed(percent);\n        },\n\n        /**\n         * Convert percent to real values\n         *\n         * @param percent {Number} X in percent\n         * @returns {Number} X in real\n         */\n        convertToValue: function (percent) {\n            var min = this.options.min,\n                max = this.options.max,\n                min_decimals = min.toString().split(\".\")[1],\n                max_decimals = max.toString().split(\".\")[1],\n                min_length, max_length,\n                avg_decimals = 0,\n                abs = 0;\n\n            if (percent === 0) {\n                return this.options.min;\n            }\n            if (percent === 100) {\n                return this.options.max;\n            }\n\n\n            if (min_decimals) {\n                min_length = min_decimals.length;\n                avg_decimals = min_length;\n            }\n            if (max_decimals) {\n                max_length = max_decimals.length;\n                avg_decimals = max_length;\n            }\n            if (min_length && max_length) {\n                avg_decimals = (min_length >= max_length) ? min_length : max_length;\n            }\n\n            if (min < 0) {\n                abs = Math.abs(min);\n                min = +(min + abs).toFixed(avg_decimals);\n                max = +(max + abs).toFixed(avg_decimals);\n            }\n\n            var number = ((max - min) / 100 * percent) + min,\n                string = this.options.step.toString().split(\".\")[1],\n                result;\n\n            if (string) {\n                number = +number.toFixed(string.length);\n            } else {\n                number = number / this.options.step;\n                number = number * this.options.step;\n\n                number = +number.toFixed(0);\n            }\n\n            if (abs) {\n                number -= abs;\n            }\n\n            if (string) {\n                result = +number.toFixed(string.length);\n            } else {\n                result = this.toFixed(number);\n            }\n\n            if (result < this.options.min) {\n                result = this.options.min;\n            } else if (result > this.options.max) {\n                result = this.options.max;\n            }\n\n            return result;\n        },\n\n        /**\n         * Round percent value with step\n         *\n         * @param percent {Number}\n         * @returns percent {Number} rounded\n         */\n        calcWithStep: function (percent) {\n            var rounded = Math.round(percent / this.coords.p_step) * this.coords.p_step;\n\n            if (rounded > 100) {\n                rounded = 100;\n            }\n            if (percent === 100) {\n                rounded = 100;\n            }\n\n            return this.toFixed(rounded);\n        },\n\n        checkMinInterval: function (p_current, p_next, type) {\n            var o = this.options,\n                current,\n                next;\n\n            if (!o.min_interval) {\n                return p_current;\n            }\n\n            current = this.convertToValue(p_current);\n            next = this.convertToValue(p_next);\n\n            if (type === \"from\") {\n\n                if (next - current < o.min_interval) {\n                    current = next - o.min_interval;\n                }\n\n            } else {\n\n                if (current - next < o.min_interval) {\n                    current = next + o.min_interval;\n                }\n\n            }\n\n            return this.convertToPercent(current);\n        },\n\n        checkMaxInterval: function (p_current, p_next, type) {\n            var o = this.options,\n                current,\n                next;\n\n            if (!o.max_interval) {\n                return p_current;\n            }\n\n            current = this.convertToValue(p_current);\n            next = this.convertToValue(p_next);\n\n            if (type === \"from\") {\n\n                if (next - current > o.max_interval) {\n                    current = next - o.max_interval;\n                }\n\n            } else {\n\n                if (current - next > o.max_interval) {\n                    current = next + o.max_interval;\n                }\n\n            }\n\n            return this.convertToPercent(current);\n        },\n\n        checkDiapason: function (p_num, min, max) {\n            var num = this.convertToValue(p_num),\n                o = this.options;\n\n            if (typeof min !== \"number\") {\n                min = o.min;\n            }\n\n            if (typeof max !== \"number\") {\n                max = o.max;\n            }\n\n            if (num < min) {\n                num = min;\n            }\n\n            if (num > max) {\n                num = max;\n            }\n\n            return this.convertToPercent(num);\n        },\n\n        toFixed: function (num) {\n            num = num.toFixed(20);\n            return +num;\n        },\n\n        _prettify: function (num) {\n            if (!this.options.prettify_enabled) {\n                return num;\n            }\n\n            if (this.options.prettify && typeof this.options.prettify === \"function\") {\n                return this.options.prettify(num);\n            } else {\n                return this.prettify(num);\n            }\n        },\n\n        prettify: function (num) {\n            var n = num.toString();\n            return n.replace(/(\\d{1,3}(?=(?:\\d\\d\\d)+(?!\\d)))/g, \"$1\" + this.options.prettify_separator);\n        },\n\n        checkEdges: function (left, width) {\n            if (!this.options.force_edges) {\n                return this.toFixed(left);\n            }\n\n            if (left < 0) {\n                left = 0;\n            } else if (left > 100 - width) {\n                left = 100 - width;\n            }\n\n            return this.toFixed(left);\n        },\n\n        validate: function () {\n            var o = this.options,\n                r = this.result,\n                v = o.values,\n                vl = v.length,\n                value,\n                i;\n\n            if (typeof o.min === \"string\") o.min = +o.min;\n            if (typeof o.max === \"string\") o.max = +o.max;\n            if (typeof o.from === \"string\") o.from = +o.from;\n            if (typeof o.to === \"string\") o.to = +o.to;\n            if (typeof o.step === \"string\") o.step = +o.step;\n\n            if (typeof o.from_min === \"string\") o.from_min = +o.from_min;\n            if (typeof o.from_max === \"string\") o.from_max = +o.from_max;\n            if (typeof o.to_min === \"string\") o.to_min = +o.to_min;\n            if (typeof o.to_max === \"string\") o.to_max = +o.to_max;\n\n            if (typeof o.grid_num === \"string\") o.grid_num = +o.grid_num;\n\n            if (o.max < o.min) {\n                o.max = o.min;\n            }\n\n            if (vl) {\n                o.p_values = [];\n                o.min = 0;\n                o.max = vl - 1;\n                o.step = 1;\n                o.grid_num = o.max;\n                o.grid_snap = true;\n\n                for (i = 0; i < vl; i++) {\n                    value = +v[i];\n\n                    if (!isNaN(value)) {\n                        v[i] = value;\n                        value = this._prettify(value);\n                    } else {\n                        value = v[i];\n                    }\n\n                    o.p_values.push(value);\n                }\n            }\n\n            if (typeof o.from !== \"number\" || isNaN(o.from)) {\n                o.from = o.min;\n            }\n\n            if (typeof o.to !== \"number\" || isNaN(o.to)) {\n                o.to = o.max;\n            }\n\n            if (o.type === \"single\") {\n\n                if (o.from < o.min) o.from = o.min;\n                if (o.from > o.max) o.from = o.max;\n\n            } else {\n\n                if (o.from < o.min) o.from = o.min;\n                if (o.from > o.max) o.from = o.max;\n\n                if (o.to < o.min) o.to = o.min;\n                if (o.to > o.max) o.to = o.max;\n\n                if (this.update_check.from) {\n\n                    if (this.update_check.from !== o.from) {\n                        if (o.from > o.to) o.from = o.to;\n                    }\n                    if (this.update_check.to !== o.to) {\n                        if (o.to < o.from) o.to = o.from;\n                    }\n\n                }\n\n                if (o.from > o.to) o.from = o.to;\n                if (o.to < o.from) o.to = o.from;\n\n            }\n\n            if (typeof o.step !== \"number\" || isNaN(o.step) || !o.step || o.step < 0) {\n                o.step = 1;\n            }\n\n            if (typeof o.from_min === \"number\" && o.from < o.from_min) {\n                o.from = o.from_min;\n            }\n\n            if (typeof o.from_max === \"number\" && o.from > o.from_max) {\n                o.from = o.from_max;\n            }\n\n            if (typeof o.to_min === \"number\" && o.to < o.to_min) {\n                o.to = o.to_min;\n            }\n\n            if (typeof o.to_max === \"number\" && o.from > o.to_max) {\n                o.to = o.to_max;\n            }\n\n            if (r) {\n                if (r.min !== o.min) {\n                    r.min = o.min;\n                }\n\n                if (r.max !== o.max) {\n                    r.max = o.max;\n                }\n\n                if (r.from < r.min || r.from > r.max) {\n                    r.from = o.from;\n                }\n\n                if (r.to < r.min || r.to > r.max) {\n                    r.to = o.to;\n                }\n            }\n\n            if (typeof o.min_interval !== \"number\" || isNaN(o.min_interval) || !o.min_interval || o.min_interval < 0) {\n                o.min_interval = 0;\n            }\n\n            if (typeof o.max_interval !== \"number\" || isNaN(o.max_interval) || !o.max_interval || o.max_interval < 0) {\n                o.max_interval = 0;\n            }\n\n            if (o.min_interval && o.min_interval > o.max - o.min) {\n                o.min_interval = o.max - o.min;\n            }\n\n            if (o.max_interval && o.max_interval > o.max - o.min) {\n                o.max_interval = o.max - o.min;\n            }\n        },\n\n        decorate: function (num, original) {\n            var decorated = \"\",\n                o = this.options;\n\n            if (o.prefix) {\n                decorated += o.prefix;\n            }\n\n            decorated += num;\n\n            if (o.max_postfix) {\n                if (o.values.length && num === o.p_values[o.max]) {\n                    decorated += o.max_postfix;\n                    if (o.postfix) {\n                        decorated += \" \";\n                    }\n                } else if (original === o.max) {\n                    decorated += o.max_postfix;\n                    if (o.postfix) {\n                        decorated += \" \";\n                    }\n                }\n            }\n\n            if (o.postfix) {\n                decorated += o.postfix;\n            }\n\n            return decorated;\n        },\n\n        updateFrom: function () {\n            this.result.from = this.options.from;\n            this.result.from_percent = this.convertToPercent(this.result.from);\n            this.result.from_pretty = this._prettify(this.result.from);\n            if (this.options.values) {\n                this.result.from_value = this.options.values[this.result.from];\n            }\n        },\n\n        updateTo: function () {\n            this.result.to = this.options.to;\n            this.result.to_percent = this.convertToPercent(this.result.to);\n            this.result.to_pretty = this._prettify(this.result.to);\n            if (this.options.values) {\n                this.result.to_value = this.options.values[this.result.to];\n            }\n        },\n\n        updateResult: function () {\n            this.result.min = this.options.min;\n            this.result.max = this.options.max;\n            this.updateFrom();\n            this.updateTo();\n        },\n\n\n        // =============================================================================================================\n        // Grid\n\n        appendGrid: function () {\n            if (!this.options.grid) {\n                return;\n            }\n\n            var o = this.options,\n                i, z,\n\n                total = o.max - o.min,\n                big_num = o.grid_num,\n                big_p = 0,\n                big_w = 0,\n\n                small_max = 4,\n                local_small_max,\n                small_p,\n                small_w = 0,\n\n                result,\n                html = '';\n\n\n\n            this.calcGridMargin();\n\n            if (o.grid_snap) {\n\n                if (total > 50) {\n                    big_num = 50 / o.step;\n                    big_p = this.toFixed(o.step / 0.5);\n                } else {\n                    big_num = total / o.step;\n                    big_p = this.toFixed(o.step / (total / 100));\n                }\n\n            } else {\n                big_p = this.toFixed(100 / big_num);\n            }\n\n            if (big_num > 4) {\n                small_max = 3;\n            }\n            if (big_num > 7) {\n                small_max = 2;\n            }\n            if (big_num > 14) {\n                small_max = 1;\n            }\n            if (big_num > 28) {\n                small_max = 0;\n            }\n\n            for (i = 0; i < big_num + 1; i++) {\n                local_small_max = small_max;\n\n                big_w = this.toFixed(big_p * i);\n\n                if (big_w > 100) {\n                    big_w = 100;\n                }\n                this.coords.big[i] = big_w;\n\n                small_p = (big_w - (big_p * (i - 1))) / (local_small_max + 1);\n\n                for (z = 1; z <= local_small_max; z++) {\n                    if (big_w === 0) {\n                        break;\n                    }\n\n                    small_w = this.toFixed(big_w - (small_p * z));\n\n                    html += '<span class=\"irs-grid-pol small\" style=\"left: ' + small_w + '%\"></span>';\n                }\n\n                html += '<span class=\"irs-grid-pol\" style=\"left: ' + big_w + '%\"></span>';\n\n                result = this.convertToValue(big_w);\n                if (o.values.length) {\n                    result = o.p_values[result];\n                } else {\n                    result = this._prettify(result);\n                }\n\n                html += '<span class=\"irs-grid-text js-grid-text-' + i + '\" style=\"left: ' + big_w + '%\">' + result + '</span>';\n            }\n            this.coords.big_num = Math.ceil(big_num + 1);\n\n\n\n            this.$cache.cont.addClass(\"irs-with-grid\");\n            this.$cache.grid.html(html);\n            this.cacheGridLabels();\n        },\n\n        cacheGridLabels: function () {\n            var $label, i,\n                num = this.coords.big_num;\n\n            for (i = 0; i < num; i++) {\n                $label = this.$cache.grid.find(\".js-grid-text-\" + i);\n                this.$cache.grid_labels.push($label);\n            }\n\n            this.calcGridLabels();\n        },\n\n        calcGridLabels: function () {\n            var i, label, start = [], finish = [],\n                num = this.coords.big_num;\n\n            for (i = 0; i < num; i++) {\n                this.coords.big_w[i] = this.$cache.grid_labels[i].outerWidth(false);\n                this.coords.big_p[i] = this.toFixed(this.coords.big_w[i] / this.coords.w_rs * 100);\n                this.coords.big_x[i] = this.toFixed(this.coords.big_p[i] / 2);\n\n                start[i] = this.toFixed(this.coords.big[i] - this.coords.big_x[i]);\n                finish[i] = this.toFixed(start[i] + this.coords.big_p[i]);\n            }\n\n            if (this.options.force_edges) {\n                if (start[0] < -this.coords.grid_gap) {\n                    start[0] = -this.coords.grid_gap;\n                    finish[0] = this.toFixed(start[0] + this.coords.big_p[0]);\n\n                    this.coords.big_x[0] = this.coords.grid_gap;\n                }\n\n                if (finish[num - 1] > 100 + this.coords.grid_gap) {\n                    finish[num - 1] = 100 + this.coords.grid_gap;\n                    start[num - 1] = this.toFixed(finish[num - 1] - this.coords.big_p[num - 1]);\n\n                    this.coords.big_x[num - 1] = this.toFixed(this.coords.big_p[num - 1] - this.coords.grid_gap);\n                }\n            }\n\n            this.calcGridCollision(2, start, finish);\n            this.calcGridCollision(4, start, finish);\n\n            for (i = 0; i < num; i++) {\n                label = this.$cache.grid_labels[i][0];\n\n                if (this.coords.big_x[i] !== Number.POSITIVE_INFINITY) {\n                    label.style.marginLeft = -this.coords.big_x[i] + \"%\";\n                }\n            }\n        },\n\n        // Collisions Calc Beta\n        // TODO: Refactor then have plenty of time\n        calcGridCollision: function (step, start, finish) {\n            var i, next_i, label,\n                num = this.coords.big_num;\n\n            for (i = 0; i < num; i += step) {\n                next_i = i + (step / 2);\n                if (next_i >= num) {\n                    break;\n                }\n\n                label = this.$cache.grid_labels[next_i][0];\n\n                if (finish[i] <= start[next_i]) {\n                    label.style.visibility = \"visible\";\n                } else {\n                    label.style.visibility = \"hidden\";\n                }\n            }\n        },\n\n        calcGridMargin: function () {\n            if (!this.options.grid_margin) {\n                return;\n            }\n\n            this.coords.w_rs = this.$cache.rs.outerWidth(false);\n            if (!this.coords.w_rs) {\n                return;\n            }\n\n            if (this.options.type === \"single\") {\n                this.coords.w_handle = this.$cache.s_single.outerWidth(false);\n            } else {\n                this.coords.w_handle = this.$cache.s_from.outerWidth(false);\n            }\n            this.coords.p_handle = this.toFixed(this.coords.w_handle  / this.coords.w_rs * 100);\n            this.coords.grid_gap = this.toFixed((this.coords.p_handle / 2) - 0.1);\n\n            this.$cache.grid[0].style.width = this.toFixed(100 - this.coords.p_handle) + \"%\";\n            this.$cache.grid[0].style.left = this.coords.grid_gap + \"%\";\n        },\n\n\n\n        // =============================================================================================================\n        // Public methods\n\n        update: function (options) {\n            if (!this.input) {\n                return;\n            }\n\n            this.is_update = true;\n\n            this.options.from = this.result.from;\n            this.options.to = this.result.to;\n            this.update_check.from = this.result.from;\n            this.update_check.to = this.result.to;\n\n            this.options = $.extend(this.options, options);\n            this.validate();\n            this.updateResult(options);\n\n            this.toggleInput();\n            this.remove();\n            this.init(true);\n        },\n\n        reset: function () {\n            if (!this.input) {\n                return;\n            }\n\n            this.updateResult();\n            this.update();\n        },\n\n        destroy: function () {\n            if (!this.input) {\n                return;\n            }\n\n            this.toggleInput();\n            this.$cache.input.prop(\"readonly\", false);\n            $.data(this.input, \"ionRangeSlider\", null);\n\n            this.remove();\n            this.input = null;\n            this.options = null;\n        }\n    };\n\n    $.fn.ionRangeSlider = function (options) {\n        return this.each(function() {\n            if (!$.data(this, \"ionRangeSlider\")) {\n                $.data(this, \"ionRangeSlider\", new IonRangeSlider(this, options, plugin_count++));\n            }\n        });\n    };\n\n\n\n    // =================================================================================================================\n    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n    // requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel\n\n    // MIT license\n\n    (function() {\n        var lastTime = 0;\n        var vendors = ['ms', 'moz', 'webkit', 'o'];\n        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n            window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n            window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']\n                || window[vendors[x]+'CancelRequestAnimationFrame'];\n        }\n\n        if (!window.requestAnimationFrame)\n            window.requestAnimationFrame = function(callback, element) {\n                var currTime = new Date().getTime();\n                var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                    timeToCall);\n                lastTime = currTime + timeToCall;\n                return id;\n            };\n\n        if (!window.cancelAnimationFrame)\n            window.cancelAnimationFrame = function(id) {\n                clearTimeout(id);\n            };\n    }());\n\n}));\n"],"sourceRoot":"assets/scripts/"}