{"version":3,"sources":["../assets/scripts/forms/jquery.chained.js"],"names":[],"mappingsfile":"chained.js","sourcesContent":["/*!\n * jQuery cxSelect\n * @name jquery.cxselect.js\n * @version 1.4.2\n * @date 2016-02-27\n * @author ciaoca\n * @email ciaoca@gmail.com\n * @site https://github.com/ciaoca/cxSelect\n * @license Released under the MIT license\n */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        factory(window.jQuery || window.Zepto || window.$);\n    };\n}(function($) {\n    var cxSelect = function() {\n        var self = this;\n        var dom, settings, callback;\n\n        // 分配参数\n        for (var i = 0, l = arguments.length; i < l; i++) {\n            if (cxSelect.isJquery(arguments[i]) || cxSelect.isZepto(arguments[i])) {\n                dom = arguments[i];\n            } else if (cxSelect.isElement(arguments[i])) {\n                dom = $(arguments[i]);\n            } else if (typeof arguments[i] === 'function') {\n                callback = arguments[i];\n            } else if (typeof arguments[i] === 'object') {\n                settings = arguments[i];\n            };\n        };\n\n        var api = new cxSelect.init(dom, settings);\n\n        if (typeof callback === 'function') {\n            callback(api);\n        };\n\n        return api;\n    };\n\n    cxSelect.isElement = function(o){\n        if (o && (typeof HTMLElement === 'function' || typeof HTMLElement === 'object') && o instanceof HTMLElement) {\n            return true;\n        } else {\n            return (o && o.nodeType && o.nodeType === 1) ? true : false;\n        };\n    };\n\n    cxSelect.isJquery = function(o){\n        return (o && o.length && (typeof jQuery === 'function' || typeof jQuery === 'object') && o instanceof jQuery) ? true : false;\n    };\n\n    cxSelect.isZepto = function(o){\n        return (o && o.length && (typeof Zepto === 'function' || typeof Zepto === 'object') && Zepto.zepto.isZ(o)) ? true : false;\n    };\n\n    cxSelect.getIndex = function(n, required) {\n        return required ? n : n - 1;\n    };\n\n    cxSelect.getData = function(data, space) {\n        if (typeof space === 'string' && space.length) {\n            space = space.split('.');\n            for (var i = 0, l = space.length; i < l; i++) {\n                data = data[space[i]];\n            };\n        };\n        return data;\n    };\n\n    cxSelect.init = function(dom, settings) {\n        var self = this;\n\n        if (!cxSelect.isJquery(dom) && !cxSelect.isZepto(dom)) {return};\n\n        var theSelect = {\n            dom: {\n                box: dom\n            }\n        };\n\n        self.attach = cxSelect.attach.bind(theSelect);\n        self.detach = cxSelect.detach.bind(theSelect);\n        self.setOptions = cxSelect.setOptions.bind(theSelect);\n        self.clear = cxSelect.clear.bind(theSelect);\n\n        theSelect.changeEvent = function() {\n            cxSelect.selectChange.call(theSelect, this.className);\n        };\n\n        theSelect.settings = $.extend({}, $.cxSelect.defaults, settings, {\n            url: theSelect.dom.box.data('url'),\n            emptyStyle: theSelect.dom.box.data('emptyStyle'),\n            required: theSelect.dom.box.data('required'),\n            firstTitle: theSelect.dom.box.data('firstTitle'),\n            firstValue: theSelect.dom.box.data('firstValue'),\n            jsonSpace: theSelect.dom.box.data('jsonSpace'),\n            jsonName: theSelect.dom.box.data('jsonName'),\n            jsonValue: theSelect.dom.box.data('jsonValue'),\n            jsonSub: theSelect.dom.box.data('jsonSub')\n        });\n\n        var _dataSelects = theSelect.dom.box.data('selects');\n\n        if (typeof _dataSelects === 'string' && _dataSelects.length) {\n            theSelect.settings.selects = _dataSelects.split(',');\n        };\n\n        self.setOptions();\n        self.attach();\n\n        // 使用独立接口获取数据\n        if (!theSelect.settings.url && !theSelect.settings.data) {\n            cxSelect.start.apply(theSelect);\n\n            // 设置自定义数据\n        } else if ($.isArray(theSelect.settings.data)) {\n            cxSelect.start.call(theSelect, theSelect.settings.data);\n\n            // 设置 URL，通过 Ajax 获取数据\n        } else if (typeof theSelect.settings.url === 'string' && theSelect.settings.url.length) {\n            $.getJSON(theSelect.settings.url, function(json) {\n                cxSelect.start.call(theSelect, json);\n            });\n        };\n    };\n\n    // 设置参数\n    cxSelect.setOptions = function(opts) {\n        var self = this;\n\n        if (opts) {\n            $.extend(self.settings, opts);\n        };\n\n        // 初次或重设选择器组\n        if (!$.isArray(self.selectArray) || !self.selectArray.length || (opts && opts.selects)) {\n            self.selectArray = [];\n\n            if ($.isArray(self.settings.selects) && self.settings.selects.length) {\n                var _tempSelect;\n\n                for (var i = 0, l = self.settings.selects.length; i < l; i++) {\n                    _tempSelect = self.dom.box.find('select.' + self.settings.selects[i]);\n\n                    if (!_tempSelect || !_tempSelect.length) {break};\n\n                    self.selectArray.push(_tempSelect);\n                };\n            };\n        };\n\n        if (opts) {\n            if (!$.isArray(opts.data) && typeof opts.url === 'string' && opts.url.length) {\n                $.getJSON(self.settings.url, function(json) {\n                    cxSelect.start.call(self, json);\n                });\n\n            } else {\n                cxSelect.start.call(self, opts.data);\n            };\n        };\n    };\n\n    // 绑定\n    cxSelect.attach = function() {\n        var self = this;\n\n        if (!self.attachStatus) {\n            self.dom.box.on('change', 'select', self.changeEvent);\n        };\n\n        if (typeof self.attachStatus === 'boolean') {\n            cxSelect.start.call(self);\n        };\n\n        self.attachStatus = true;\n    };\n\n    // 移除绑定\n    cxSelect.detach = function() {\n        var self = this;\n        self.dom.box.off('change', 'select', self.changeEvent);\n        self.attachStatus = false;\n    };\n\n    // 清空选项\n    cxSelect.clear = function(index) {\n        var self = this;\n        var _style = {\n            display: '',\n            visibility: ''\n        };\n\n        index = isNaN(index) ? 0 : index;\n\n        // 清空后面的 select\n        for (var i = index, l = self.selectArray.length; i < l; i++) {\n            self.selectArray[i].empty().prop('disabled', true);\n\n            if (self.settings.emptyStyle === 'none') {\n                _style.display = 'none';\n            } else if (self.settings.emptyStyle === 'hidden') {\n                _style.visibility = 'hidden';\n            };\n\n            self.selectArray[i].css(_style);\n        };\n    };\n\n    cxSelect.start = function(data) {\n        var self = this;\n\n        if ($.isArray(data)) {\n            self.settings.data = cxSelect.getData(data, self.settings.jsonSpace);\n        };\n\n        if (!self.selectArray.length) {return};\n\n        // 保存默认值\n        for (var i = 0, l = self.selectArray.length; i < l; i++) {\n            if (typeof self.selectArray[i].attr('data-value') !== 'string' && self.selectArray[i][0].options.length) {\n                self.selectArray[i].attr('data-value', self.selectArray[i].val());\n            };\n        };\n\n        if (self.settings.data || (typeof self.selectArray[0].data('url') === 'string' && self.selectArray[0].data('url').length)) {\n            cxSelect.getOptionData.call(self, 0);\n        } else if (self.selectArray[0][0].options.length && typeof self.selectArray[0].attr('data-value') === 'string') {\n            self.selectArray[0].val(self.selectArray[0].attr('data-value'));\n            cxSelect.getOptionData.call(self, 1);\n        } else {\n            self.selectArray[0].prop('disabled', false).css({\n                'display': '',\n                'visibility': ''\n            });\n        };\n    };\n\n    // 获取选项数据\n    cxSelect.getOptionData = function(index) {\n        var self = this;\n\n        if (typeof index !== 'number' || isNaN(index) || index < 0 || index >= self.selectArray.length) {return};\n\n        var _indexPrev = index - 1;\n        var _select = self.selectArray[index];\n        var _selectData;\n        var _valueIndex;\n        var _dataUrl = _select.data('url');\n        var _jsonSpace = typeof _select.data('jsonSpace') === 'undefined' ? self.settings.jsonSpace : _select.data('jsonSpace');\n        var _query = {};\n        var _queryName;\n        var _selectName;\n        var _selectValue;\n\n        cxSelect.clear.call(self, index);\n\n        // 使用独立接口\n        if (typeof _dataUrl === 'string' && _dataUrl.length) {\n            if (index > 0) {\n                for (var i = 0, j = 1; i < index; i++, j++) {\n                    _queryName = self.selectArray[j].data('queryName');\n                    _selectName = self.selectArray[i].attr('name');\n                    _selectValue = self.selectArray[i].val();\n\n                    if (typeof _queryName === 'string' && _queryName.length) {\n                        _query[_queryName] = _selectValue;\n                    } else if (typeof _selectName === 'string' && _selectName.length) {\n                        _query[_selectName] = _selectValue;\n                    };\n                };\n            };\n\n            $.getJSON(_dataUrl, _query, function(json) {\n                _selectData = cxSelect.getData(json, _jsonSpace);\n\n                cxSelect.buildOption.call(self, index, _selectData);\n            });\n\n            // 使用整合数据\n        } else if (self.settings.data && typeof self.settings.data === 'object') {\n            _selectData = self.settings.data;\n\n            for (var i = 0; i < index; i++) {\n                _valueIndex = cxSelect.getIndex(self.selectArray[i][0].selectedIndex, typeof self.selectArray[i].data('required') === 'boolean' ? self.selectArray[i].data('required') : self.settings.required);\n\n                if (typeof _selectData[_valueIndex] === 'object' && $.isArray(_selectData[_valueIndex][self.settings.jsonSub]) && _selectData[_valueIndex][self.settings.jsonSub].length) {\n                    _selectData = _selectData[_valueIndex][self.settings.jsonSub];\n                } else {\n                    _selectData = null;\n                    break;\n                };\n            };\n\n            cxSelect.buildOption.call(self, index, _selectData);\n        };\n    };\n\n    // 构建选项列表\n    cxSelect.buildOption = function(index, data) {\n        var self = this;\n\n        var _select = self.selectArray[index];\n        var _required = typeof _select.data('required') === 'boolean' ? _select.data('required') : self.settings.required;\n        var _firstTitle = typeof _select.data('firstTitle') === 'undefined' ? self.settings.firstTitle : _select.data('firstTitle');\n        var _firstValue = typeof _select.data('firstValue') === 'undefined' ? self.settings.firstValue : _select.data('firstValue');\n        var _jsonName = typeof _select.data('jsonName') === 'undefined' ? self.settings.jsonName : _select.data('jsonName');\n        var _jsonValue = typeof _select.data('jsonValue') === 'undefined' ? self.settings.jsonValue : _select.data('jsonValue');\n\n        if (!$.isArray(data)) {return};\n\n        var _html = !_required ? '<option value=\"' + String(_firstValue) + '\">' + String(_firstTitle) + '</option>' : '';\n\n        // 区分标题、值的数据\n        if (typeof _jsonName === 'string' && _jsonName.length) {\n            // 无值字段时使用标题作为值\n            if (typeof _jsonValue !== 'string' || !_jsonValue.length) {\n                _jsonValue = _jsonName;\n            };\n\n            for (var i = 0, l = data.length; i < l; i++) {\n                _html += '<option value=\"' + String(data[i][_jsonValue]) + '\">' + String(data[i][_jsonName]) + '</option>';\n            };\n\n            // 数组即为值的数据\n        } else {\n            for (var i = 0, l = data.length; i < l; i++) {\n                _html += '<option value=\"' + String(data[i]) + '\">' + String(data[i]) + '</option>';\n            };\n        };\n\n        _select.html(_html).prop('disabled', false).css({\n            'display': '',\n            'visibility': ''\n        });\n\n        // 初次加载设置默认值\n        if (typeof _select.attr('data-value') === 'string') {\n            _select.val(String(_select.attr('data-value'))).removeAttr('data-value');\n\n            if (_select[0].selectedIndex < 0) {\n                _select[0].options[0].selected = true;\n            };\n        };\n\n        if (_required || _select[0].selectedIndex > 0) {\n            _select.trigger('change');\n        };\n\n    };\n\n    // 改变选择时的处理\n    cxSelect.selectChange = function(name) {\n        var self = this;\n\n        if (typeof name !== 'string' || !name.length) {return};\n\n        var index;\n\n        name = name.replace(/\\s+/g, ',');\n        name = ',' + name + ',';\n\n        // 获取当前 select 位置\n        for (var i = 0, l = self.selectArray.length; i < l; i++) {\n            if (name.indexOf(',' + self.settings.selects[i] + ',') > -1) {\n                index = i;\n                break;\n            };\n        };\n\n        if (typeof index === 'number' && index > -1) {\n            index += 1;\n            cxSelect.getOptionData.call(self, index);\n        };\n    };\n\n    $.cxSelect = function() {\n        return cxSelect.apply(this, arguments);\n    };\n\n    // 默认值\n    $.cxSelect.defaults = {\n        selects: [],            // 下拉选框组\n        url: null,              // 列表数据文件路径（URL）或数组数据\n        data: null,             // 自定义数据\n        emptyStyle: null,       // 无数据状态显示方式\n        required: false,        // 是否为必选\n        firstTitle: '请选择',    // 第一个选项的标题\n        firstValue: '',         // 第一个选项的值\n        jsonSpace: '',          // 数据命名空间\n        jsonName: 'n',          // 数据标题字段名称\n        jsonValue: '',          // 数据值字段名称\n        jsonSub: 's'            // 子集数据字段名称\n    };\n\n    $.fn.cxSelect = function(settings, callback) {\n        this.each(function(i) {\n            $.cxSelect(this, settings, callback);\n        });\n        return this;\n    };\n}));"],"sourceRoot":"assets/scripts/"}